#include <stdio.h>
#include <stdlib.h>

typedef char ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

BinTree CreatBinTree(); /* 实现细节忽略 */
void InorderTraversal( BinTree BT );
void PreorderTraversal( BinTree BT );
void PostorderTraversal( BinTree BT );
void LevelorderTraversal( BinTree BT );

int main(){
    BinTree BT = CreatBinTree(); //Input: ABD--FE---CG-H--I--
    
    printf("Inorder:");    InorderTraversal(BT);    printf("\n");
    printf("Preorder:");   PreorderTraversal(BT);   printf("\n");
    printf("Postorder:");  PostorderTraversal(BT);  printf("\n");
    printf("Levelorder:"); LevelorderTraversal(BT); printf("\n");
    return 0;
}


BinTree CreatBinTree() {
	BinTree bt = (BinTree)malloc(sizeof(struct TNode));
	char ch;
	ch = getchar();
	
	if(ch == '-') bt = NULL;
	
	else {
		bt->Data = ch;
		bt->Left = CreatBinTree();
		bt->Right = CreatBinTree();
	}
	return bt;
}

void InorderTraversal( BinTree BT ) {
    if(BT) {
        InorderTraversal(BT->Left);
        printf(" %c", BT->Data);
        InorderTraversal(BT->Right);
    }
}

void PreorderTraversal( BinTree BT ) {
    if(BT) {
        printf(" %c", BT->Data);
        PreorderTraversal( BT->Left );
        PreorderTraversal( BT->Right );
    }	
}

void PostorderTraversal( BinTree BT ) {
    if(BT) {
        PostorderTraversal( BT->Left );
        PostorderTraversal( BT->Right );
        printf(" %c", BT->Data );
    }	
}

void LevelorderTraversal( BinTree BT ) {
	
	BinTree Queue[100];
	typedef int QPosition;
	QPosition front = 0, rear = 0;
	
	if(!BT) return;
	
	Queue[rear++] = BT;
	while(front < rear) {
		BinTree BTnode = Queue[front++];
		printf(" %c", BTnode->Data);
		
		if(BTnode->Left) {
			Queue[rear++] = BTnode->Left;
		}
		if(BTnode->Right) {
			Queue[rear++] = BTnode->Right;
		}
		
	}
}

//Another way of implementing the queue is to use a linked list with a varialbe head and tail. To dequeue, move the head, to addQueue, add the node to the tail.
