#include <stdio.h>
#include <stdlib.h>

#define MAXSIZE 5
#define ERROR -1
typedef enum {false, true} bool;
typedef int ElementType;
typedef int Position;
typedef struct LNode *List;
struct LNode {
    ElementType Data[MAXSIZE];
    Position Last; /* 保存线性表中最后一个元素的位置 */
};

List MakeEmpty(); 
Position Find( List L, ElementType X );
bool Insert( List L, ElementType X, Position P );
bool Delete( List L, Position P );

void printList(List L){
	int first = 1;
	for(Position pos = 0; pos <= L->Last; pos++) {
		if(first) first = !first;
		else printf(" ");
		printf("%d", L->Data[pos]);
	}
	printf("\n");
}

int main()
{
    List L;
    ElementType X;
    Position P;
    int N;

    L = MakeEmpty();
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        if ( Insert(L, X, 0)==false )
            printf(" Insertion Error: %d is not in.\n", X);
        printf("List: ");
        printList(L);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        P = Find(L, X);
        if ( P == ERROR )
            printf("Finding Error: %d is not in.\n", X);
        else
            printf("%d is at position %d.\n", X, P);
    }
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &P);
        if ( Delete(L, P)==false )
            printf(" Deletion Error.\n");
        else {
        	printf(" Deletion Success!\n");
        	printList(L);
		}
        	
        if ( Insert(L, 0, P)==false )
            printf(" Insertion Error: 0 is not in.\n");
    }
    return 0;
}


List MakeEmpty() {
	List L;
	L = (List)malloc(sizeof(struct LNode));
	L->Last = -1;
	return L;
}


Position Find( List L, ElementType X ) {
	List node = L;
	Position p = ERROR, i = 0;
	while(i <= node->Last && node->Data[i] != X) i++;
	
	if(i <= node->Last) p = i;
	return p;
}


bool Insert( List L, ElementType X, Position P ) {
	
	if(L->Last == MAXSIZE - 1) {
		printf("FULL");
		return false;
	}
	
	if(P < 0 || P >L->Last + 1) {
		printf("ILLEGAL POSITION");
		return false;
	}
	
	for(Position pos = L->Last; pos >= P; pos--) {
		L->Data[pos + 1] = L->Data[pos];
			
	}
	L->Data[P] = X;
	L->Last++;
	return true;
}


bool Delete( List L, Position P ) {
	if(P < 0 || P > L->Last) {
		printf("POSITION %d EMPTY", P);
		return false;
	}
	
	for(Position pos = P; pos < L->Last; pos++){
		L->Data[pos] = L->Data[pos + 1];
	}
	L->Last--;
	return true;
}
