#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

void visit(Position p);
void PreorderTraversal( BinTree BT ); /* 先序遍历，由裁判实现，细节不表 */
void InorderTraversal( BinTree BT );  /* 中序遍历，由裁判实现，细节不表 */

BinTree Insert( BinTree BST, ElementType X );
BinTree Delete( BinTree BST, ElementType X );
Position Find( BinTree BST, ElementType X );
Position FindMin( BinTree BST );
Position FindMax( BinTree BST );

int main()
{
    BinTree BST, MinP, MaxP, Tmp;
    ElementType X;
    int N, i;

    BST = NULL;
    scanf("%d", &N);
    for ( i=0; i<N; i++ ) {
        scanf("%d", &X);
        BST = Insert(BST, X);
    }
    printf("Preorder:"); PreorderTraversal(BST); printf("\n");
    MinP = FindMin(BST);
    MaxP = FindMax(BST);
    scanf("%d", &N);
    for( i=0; i<N; i++ ) {
        scanf("%d", &X);
        Tmp = Find(BST, X);
        if (Tmp == NULL) printf("%d is not found\n", X);
        else {
            printf("%d is found\n", Tmp->Data);
            if (Tmp==MinP) printf("%d is the smallest key\n", Tmp->Data);
            if (Tmp==MaxP) printf("%d is the largest key\n", Tmp->Data);
        }
    }
    scanf("%d", &N);
    for( i=0; i<N; i++ ) {
        scanf("%d", &X);
        BST = Delete(BST, X);
    }
    printf("Inorder:"); InorderTraversal(BST); printf("\n");

    return 0;
}

void visit(Position p){
	printf(" %d", p->Data);
}

void PreorderTraversal( BinTree BT ) {/* 先序遍历，由裁判实现，细节不表 */
	if(BT) {
		
		printf(" %d", BT->Data);
		PreorderTraversal(BT->Left);
		PreorderTraversal(BT->Right);
	}
} 

void InorderTraversal( BinTree BT ) {/* 中序遍历，由裁判实现，细节不表 */
	if(BT) {
		InorderTraversal(BT->Left);
		visit(BT);
		InorderTraversal(BT->Right);
	}
}  

BinTree Insert( BinTree BST, ElementType X ) {
	BinTree bt = (BinTree)malloc(sizeof(struct TNode));
	bt->Data = X;
	bt->Left = NULL;
	bt->Right = NULL;
	
	if(!BST) BST = bt;
	
	else if(BST->Data > X) BST->Left = Insert(BST->Left, X);
	else if(BST->Data < X) BST->Right = Insert(BST->Right, X);
	return BST;
	


} 

BinTree Delete( BinTree BST, ElementType X ) {
	if(!BST) {
		printf("Not Found\n");
		return NULL;
	}
	
	else if(BST->Data < X) BST->Right = Delete(BST->Right, X);
	else if(BST->Data > X) BST->Left = Delete(BST->Left, X);
	else { //BST->Data == X
		
		if(!BST->Left) { // no left child;
			BinTree q = BST;
			BST = BST->Right;
			free(q);	
		}

		else if(!BST->Right) {
			BinTree q = BST;
			BST = BST->Left;
			free(q);
		}
		
		
		else if( BST->Left && BST->Right ) {
			
			BinTree q = FindMax(BST->Left);
			BST->Data = q->Data;
			BST->Left = Delete(BST->Left, BST->Data);
		}
	}
	
	return BST;
} 

Position Find( BinTree BST, ElementType X ) {
	if(!BST) return NULL;
	
	if(BST->Data == X) return BST;
	if(BST->Data < X ) return Find(BST->Right, X);
	return Find(BST->Left, X);

} 

Position FindMin( BinTree BST ) {
	if(!BST) return NULL;
	
	Position res = BST;
	while(res->Left) res = res->Left;
	return res;
} 

Position FindMax( BinTree BST ) {
	if(!BST) return NULL;
	
	Position res = BST;
	while(res->Right) res = res->Right;
	return res;
} 
