#include <stdio.h>
#include <stdlib.h>

#define ERROR NULL
typedef enum {false, true} bool;
typedef int ElementType;
typedef struct LNode *PtrToLNode;
struct LNode {
    ElementType Data;
    PtrToLNode Next;
};
typedef PtrToLNode Position;
typedef PtrToLNode List;

List MakeEmpty(); 
Position Find( List L, ElementType X );
bool Insert( List L, ElementType X, Position P );
bool Delete( List L, Position P );
void printList(List L);

int main()
{
    List L;
    ElementType X;
    Position P;
    int N;
    bool flag;

    L = MakeEmpty();
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        flag = Insert(L, X, L->Next);
        if ( flag==false ) printf("Wrong Answer\n");
    }
    
    printList(L);
    scanf("%d", &N);
    while ( N-- ) {
        scanf("%d", &X);
        P = Find(L, X);
        if ( P == ERROR )
            printf("Finding Error: %d is not in.\n", X);
        else {
        	//printf("P->Data is %d  [[]]\n", P->Data);
        	
            flag = Delete(L, P);
            printf("%d is found and deleted.\n", X);
            printf("List: ");
            printList(L);
            if ( flag==false )
                printf("Wrong Answer.\n");
        }
    }
    flag = Insert(L, X, NULL);
    if ( flag==false ) printf("Wrong Answer\n");
    else
        printf("%d is inserted as the last element.\n", X);
    P = (Position)malloc(sizeof(struct LNode));
    flag = Insert(L, X, P);
    if ( flag==true ) printf("Wrong Answer\n");
    flag = Delete(L, P);
    if ( flag==true ) printf("Wrong Answer\n");
    for ( P=L->Next; P; P = P->Next ) printf("%d ", P->Data);
    return 0;
}


void printList(List L) {
	PtrToLNode node = L->Next;
	int first = 1;
	while(node) {
		if(first) first = !first;
		else printf(" ");
		printf("%d", node->Data);
		
		node = node->Next;
	}
	printf("\n");
}


List MakeEmpty() {
	PtrToLNode head = (PtrToLNode)malloc(sizeof(struct LNode));
	head->Next = NULL;
	return head;
} 


Position Find( List L, ElementType X ) {
	PtrToLNode node = L->Next;
	
	Position p = ERROR;
	
	while(node) {
		
		if(node->Data == X) {
			p = node;
			break;
		}
		
		node = node->Next;
	}
	//printf("Pdata is %d\n", p->Data);
	
	return p;
}

bool Insert( List L, ElementType X, Position P ) {
	Position pos = L, next = pos->Next;
	
	PtrToLNode newnode = (PtrToLNode)malloc(sizeof(struct LNode));
	newnode->Data = X;
	newnode->Next = NULL;
	
	if(L == P) {//P points to the head
			
		newnode->Next = next;
		pos->Next = newnode;
		
		return true;
	}
	
	else{
		while(next) {
			if(next == P) break;
			pos = next;
			next = next->Next;
		}
		
		if(next == P) {
			pos->Next = newnode;
			newnode->Next = P;
			return true;
		}
		
		else {
			printf("Wrong Position for Insertion\n");
			return false;
		}
	}
}


bool Delete( List L, Position P ) {
	//printf("data is %d\n", P->Next->Data);
	
	Position pos = L;  // Watch out for the NULL pointer, if L points to NULL
	
	if(L == NULL) {
		printf("Wrong Position for Deletion\n");
		return false;
	}
	
	Position next = pos->Next;
	
	if(pos == P) {
		pos->Next = P->Next;
		return true;
	}
	
	while(next){
		if(next == P) break;
		
		pos = next;
		next = next->Next;	
	}
	
	if(next == P) {
		pos->Next = P->Next;
		return true;
	}
	
	else {
		printf("Wrong Position for Deletion\n");
		return false;
	}		
}
