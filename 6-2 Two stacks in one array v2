#include <stdio.h>
#include <stdlib.h>
#define ERROR 1e8


typedef int ElementType;
typedef enum { push, pop, end } Operation;

typedef struct StackRecord *Stack;
struct StackRecord  {
    int Capacity;       /* maximum size of the stack array */
    int Top1;           /* top pointer for Stack 1 */
    int Top2;           /* top pointer for Stack 2 */
    ElementType *Array; /* space for the two stacks */
};

Operation GetOp() {/* details omitted */
	getchar();
	char op[5];
	Operation res;
	scanf("%s", op);
	switch( op[1] ) {
		case 'u': 
			res = push;
			break;
		case 'o':
			res = pop;
			break;
		case 'n':
			res = end;
			break;
	}
	return res;
} 

void PrintStack( Stack S, int Stacknum ) {/* details omitted */
	printf("Pop from Stack %d:", Stacknum);
	
	if( Stacknum == 1) {
		for(int i = S->Top1; i >= 0; i--) {
			printf(" %d", S->Array[i]);
		}
	}
	else {
		for(int i = S->Top2; i < S->Capacity; i++) {
			printf(" %d", S->Array[i]);
		}
	}
	printf("\n");
}

Stack CreateStack( int MaxElements );
int IsEmpty( Stack S, int Stacknum );
int IsFull( Stack S );
int Push( ElementType X, Stack S, int Stacknum );
ElementType Top_Pop( Stack S, int Stacknum );


int main()
{
    int N, Sn, X;
    Stack S;
    int done = 0;

    scanf("%d", &N);
    S = CreateStack(N);
    while ( !done ) {
        switch( GetOp() ) {
        case push: 
            scanf("%d %d", &Sn, &X);
            if (!Push(X, S, Sn)) printf("Stack %d is Full!\n", Sn);
            break;
        case pop:
            scanf("%d", &Sn);
            X = Top_Pop(S, Sn);
            if ( X==ERROR ) printf("Stack %d is Empty!\n", Sn);
            break;
        case end:
            PrintStack(S, 1);
            PrintStack(S, 2);
            done = 1;
            break;
        }
    }
    return 0;
}

Stack CreateStack( int MaxElements ) {
	Stack s = (Stack)malloc(sizeof(struct StackRecord));
	s->Array = (ElementType *)malloc( MaxElements * sizeof( ElementType ) );
	s->Capacity = MaxElements;
	s->Top1 = -1;
	s->Top2 = MaxElements;
	return s;
} 

int IsEmpty( Stack S, int Stacknum ) {
	if(Stacknum == 1) {
		if( S->Top1 == -1 ) return 1;
	}
	if(Stacknum == 2) {
		if( S->Top2 == S->Capacity ) return 1;
	}
	return 0;
} 

int IsFull( Stack S ) {
	if(S->Top2 - S->Top1 == 1) return 1;
	return 0;
} 

int Push( ElementType X, Stack S, int Stacknum ){
	int res = 1;
	if(IsFull(S)) res = 0;
	else {
		if(Stacknum == 1) {
			S->Array[++(S->Top1)] = X;
		}
		else {
			S->Array[--(S->Top2)] = X;
		}	
	}
	
	return res;
}

ElementType Top_Pop( Stack S, int Stacknum ) {
	ElementType res = ERROR;
	if( Stacknum == 1 ) {
		if(!IsEmpty( S, Stacknum )) res = S->Array[(S->Top1)--];
	}
	else if( !IsEmpty( S, Stacknum ) ) res = S->Array[(S->Top2)++];
	
	return res;
}
